安全C编译器的形式验证方法的研究和实现

安全C编译器的构建和形式验证方法的研究与实现




于是：可以自己写一个安全C编译器，编译中进行证明，故能保证编译器安全。（即用形式化证明来构造编译器）





Twelf是逻辑框架LF的实现。它用于逻辑编程和程序设计语言理论的形式化。


[15] Yang XJ, Chen Y, Eide E, Regehr J. Finding and understanding bugs in C compilers. In: Proc. of the 2011 ACM SIGPLAN Conf.
on Programming Language Design and Implementation (PLDI 2011). New York: ACM, 2011. 283−294. [doi: 10.1145/1993498.19
93532]


该系统主要包括规约语言和定理证明器两部分，并且还集成了解释器、类型检查器及预定义的规约库和各种方便的浏览、编辑工具.PvS提供的规约语言基于高阶逻拜，具有丰富的类型系统，是一般适用的语言，表达能力很强，大多数数学概念、计算概念均可用该语言自然直接地表示出来.PVS的定理证明器以交互方式工作，同时又具备高度的自动化水准.它的命令的能力很强，琐屑的证明细节为证明器的内部推理机制掩盖，使得用户仅在关健决策点上控制证明过程.PVS为在计算机科学中应用形式化方法提供机器支持，然而形式化方法可以以不同的方式、风格、不同程度的严格性，应用于不同的目标.例如，最早的形式化方法用于对程序作正确性证明:即驻行正一段以实现级的程序设计语言书写的程序满足已知为正确的详细规约.PVS并不适合这种程序正确性验证工作，它的设计目标是辅助形式化方法在计机系统开发的早期阶段的应用。欲应用形式化方法，首先要有一个对所研究对象(硬件系统、软件系统、算法等)的准确的形式化描述，即一个正确的形式化规约.然而，要获得正确的形式化规约，仅引入形式化方法是不够的，PVS提供如下机制用以保证规约的正确性:(l)在规约语言中引入丰富的类型系统.通过严格的类型检查来及早发现规约中的错误.(2)一个规约相当于一套公理系统，提出一系列关于此公理系统的定理，如果规约是正确的，那么这些定理应该成立，通过应用PVS的定理证明器构造这些定理的证明来证规约的正确性。这样，PVS可用于构造充分可信为’正确’的规约。





